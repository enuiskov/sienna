//~~(1;;); //~~ forces syntax error after double ';';
(
*test_bug {42; drop;};
*!1 {get_SP};
*!2 {sub get_SP,-4};
*!3 {sub get_SP,-8};
*!4 {sub get_SP,-12};
*!5 {sub get_SP,-16};
*!6 {sub get_SP,-20};
*!7 {sub get_SP,-24};
*!8 {sub get_SP,-28};
*!9 {sub get_SP,-32};

*drop  {drop1};
*drop1 {set_SP (sub get_SP,-4)};
*drop2 {set_SP (sub get_SP,-8)};
*drop3 {set_SP (sub get_SP,-12)};
*drop4 {set_SP (sub get_SP,-16)};
*drop5 {set_SP (sub get_SP,-20)};
*drop6 {set_SP (sub get_SP,-24)};
*drop7 {set_SP (sub get_SP,-28)};
*drop8 {set_SP (sub get_SP,-32)};
*drop9 {set_SP (sub get_SP,-36)};







*push  {};
*bla   {nop};
*dup   {get !1};
*movup {set !2};

//*!0 {sub get_SP,+1};
//*j<=0 {csp++; jlez};
*eqz?
{
	//!!!;
	
	jpos,drop (dup),            ^0;
	jpos,drop (sub 0,(get !2)), ^0;
	
	    ret drop,1;
	:0; ret drop,0;
};
*jz   
{
	//!!!;
	jpos (get,eqz? !2),^J; drop;
	
	//!!!;
	set !2; ret;
	
	//set (get,eqz? !2),!3;
	
	//!!!;
	//set !2;
	//~~ csp++;
	//jpos;
	//drop;
	//!!!;
	//drop;
	//ret;
	:J;
	//!!!;
	set !2; goto2;
	//:RET;
	//!!!;
};

*reset  {mode 254};

*add   {neg; sub};
*neg   {dup; set !3 0; sub};

*mulsign
{
//	+60,0; //~~ +1;
//	+60,0; //~~ -1;
//	-60,+1; //~~ -1;
//	-60,-1; //~~ +1;
//	
	//!!!;
	dup;
	jpos not,^Z;
		jpos drop,^P;
			drop; neg;
		:P;
		//!!!;
		ret;
		//~~goto ^RET;
	
	:Z;
	//!!!;
	drop2; 0;
	
	//~~:RET;
	//	!!!;
};


//~~mul   (iOp1,iOp2,oV,_Neg2,cI)
//~~mul   (iOp1'$i32,iOp2'$i32,oV'$i32,_Neg2'$i32,cI'$i32)
mul(iOp1'$i32,iOp2'$i32,oV'$i32,    _Neg2'$i32,cI'$i32)
{
	//!!!;
	jz (get iOp1),^Z; drop;
	jz (get iOp2),^Z; drop;
	
	jpos (sub (get iOp2; get iOp1)),^DontSwap;
	(
		drop;
		get iOp1;
		set iOp1 (get iOp2);
		set iOp2;
	);
	
	:DontSwap;
	
	set oV 0;
	set _Neg2 (get,neg iOp2);
	
	set cI (get,abs iOp1); :I; jpos,drop (dec,dup),^I
	(
		set oV (sub (get oV; get _Neg2));
	);
	set oV (mulsign (get oV; get,sign iOp1));
	ret;
	
	:Z; set oV 0;
};

*abs     {dup; jpos ^RET; drop; neg; :RET;};
*sign    {jpos ^POS; neg; jpos ^NEG; ret; :POS; ret +1; :NEG; ret -1; };
*clamp01 {sign; inc; dup; jpos ^GE0; drop; ret; :GE0; dec};

*goto    {csp++;       set_IP;};
*goto2   {csp++,csp++; set_IP;};

*case    {jpos (not sub (get !3; get !2)),^J; drop3; ret; :J; drop; movup; csp++; set_IP};
*not     {jpos ^1; neg; jpos ^1; drop; ret 1; :1; ret 0};
*and     {sub (clamp01,neg; set !3 (get,clamp01 !2)); dec; clamp01};
*or      {!!!; };
*xor     {!!!; };

//*case
//{
//	xget 3; xget 3; sub; not;
//	
//	jpos ^Jumping; drop;drop;drop; ret; :Jumping; xmov -3; xset 1 5;
//	drop; drop; csp--; jpos;
//};
//*loop {dup};

**sub    {!!!;};
**equals {!!!;};
**less?  {get; !3; get; sub; jpos ^TRUE; set !3 0; drop; ret; :TRUE; set !2 1;};

*inc {sub -1};
*dec {sub +1};

**inc {dup; dup; get; inc; set !3; set};
**dec {dup; dup; get; dec; set !3; set};

*white {#ffffffffx16}; *black {#ff000000x16};
*red   {#ffff0000x16}; *green {#ff00ff00x16}; *blue {#ff0000ffx16}; *yellow {#ffffff00x16};
*screensize {30,20};
*argb       {set (mul 4)};

fillrect(iColor,iX,iY,iW,iH,iScrW,iScrH,_MaxX,_MaxY,_ScanW,cX,cY,cBase)
{
	set _MaxX  (add (get iX; get iW));
	set _MaxY  (add (get iY; get iH));
	
	set _ScanW (mul (get iScrW; 1));
	
	set cY (get iY); :Y; jpos,drop (sub (get _MaxY; get cY)),^Y
	(
		set cX (get iX); :X; jpos,drop (sub (get _MaxX; get cX)),^X
		(
			set cBase (mul (get _ScanW; get cY); add (get cX));
			!!!;
			argb (get cBase) (get iColor);
			*inc cX;
		);
		*inc cY;
	);
	//!!!;
};
drawrect(iColor,iX,iY,iW,iH,iScrW,iScrH)//,_MaxX,_MaxY,_ScanW,cX,cY,cBase)
{
	fillrect ((get iColor), (get iX),(get iY),  (get iW),1, screensize);
	fillrect ((get iColor), (get iX),(get iY),  1,(get iH), screensize);
	
	fillrect ((get iColor),  (add (get iX; (get iW; sub 1))),  (get iY),              1, (get iH), screensize);
	fillrect ((get iColor),  (get iX), (add (get iY; (get iH; sub 1))), (get iW),        1, screensize);
};
drawimage
{
	fillrect (white,  0,  0, 30, 20, screensize);
	drawrect (black,  1,  1, 28, 18, screensize);
	
	fillrect (yellow,   6,3, 10,8, screensize);
	drawrect (red,      6,3, 10,8, screensize);
	fillrect (blue,     4,7, 20,3, screensize);
	
	fillrect (green,   10,6, 10,8, screensize);
	drawrect (black,   10,6, 10,8, screensize);
	!!!;
};
testproc (rTestVar,iName,iAge,iPassNum,o1,oError; "#+*4")
{
	set rTestVar 123456;
	set o1     555;
	set oError 42;
};
mtest(r0,r1, i0,i1,i2, o0,o1,o2,o3, _1,_2,_3)
{
	set r0 101;
	set r1 102;
	set o0 777;
	set o1 778;
	set o2 779;
	set o3 780;
};
*test_AAA {111; test_BBB;};
*test_BBB {222; test_CCC;};
*test_CCC {333; };

!program// (oError)
{
//	777;
//	!!!,mtest (11,22, 333,444,555);
//	!!!;
//	mtest;
//	///!!!;
//	1;
//	!!!,test_AAA();
//	!!!;
//	neg 2;// drop2;
//	
//	1,2,3,4,5;
//	1,2,3,4,5;
//	//!!!,neg 5;
//	!!!,neg (40,41,42,43,44,45);
//	
//	!!!;
//	mtest (11,22,333,444,555);
	//!!!;
	//eqz?  0;
	//eqz? +1;
	//eqz? +10;
	//eqz? -10;
	//drop4;
	//!!!;
//	
	
	//!!!;
	//!!!;
	//#ffffffffx16;
	
	//sign +50;
	//sign -50;
	//sign   0;
	//!!!;
//
	//!!!;
	//not;
	//!!!;
	//!!!;
	drawimage;
	//!!!;
//	654321;
//	
	//111,222,333;
	//!!!;
	//testproc();
//	
//	
//	111,222,333;
//	!!!;
//	//wasf;
//	drop4;
//	drop4;
//	drop4;
//	
//	drop4;
//	drop4;
//	
	reset;
};

);


	get (sub #EAX -3);

	mov EAX,ST0;
	mov eax,st0;
	mov eax,O[ebp * 2 + 4];

	mov EAX,ST0;
	mov R0,ST0;
	mov r0,st0;


	mov #EAX,#ST0;
	mov #eax,#st0;
	mov #eax,O[#ebp * 2 + 4];

	mov #EAX,#ST0;
	mov #R0,#ST0;
	

	mov @EAX,@ST0;
	mov @eax,@st0;
	mov @eax,O[@ebp * 2 + 4];

	mov @EAX,@ST0;
	mov @R0,@ST0;


	mov %EAX,%ST0;
	mov %eax,%st0;
	mov %eax,O[%ebp * 2 + 4];

	mov %EAX,%ST0;
	mov %R0,%ST0;


	mov &EAX,&ST0;
	mov &eax,&st0;
	mov &eax,O[&ebp * 2 + 4];

	mov &EAX,&ST0;
	mov &R0,&ST0;


	mov *EAX,*ST0;
	mov *eax,*st0;
	mov *eax,O[*ebp * 2 + 4];

	mov *EAX,*ST0;
	mov *R0,*ST0;

	

	set oDest;

	get @IP;
	get iOffs;
	sub;
	get;
	set oDest;


a1; aName;
b1; bName;
c1; cName;
d1; dName;
e1; eName;
f1; fName;
g1; gName;
h1; hName;
i1; iName;
j1; jName;
k1; kName;
l1; lName;
m1; mName;
n1; nName;
o1; oName;
p1; pName;
q1; qName;
r1; rName;
s1; sName;
t1; tName;
u1; uName;
v1; vName;
w1; wName;
x1; xName;
y1; yName;
z1; zName;

!1; !Name;
@1; @Name;
#1; #Name;
$1; $Name;
%1; %Name;
^1; ^Name;
&1; &Name;
*1; *Name;
'1; 'Name;
:1; :Name;
/1; /Name;
|1; |Name;
=1; =Name;
+1; +Name;
-1; -Name;
_1; _Name;
\1; \Name;
`1; `Name;
<1; <Name;
>1; >Name;
?1; ?Name;


*basic_opcodes
{
	"
		[Opc' Im7']
		[Opc' ''''][Im8''''']
		[Opc' ''''][Im16''''''''''''']
		[Opc' ''''][Im32''''''''''''''''''''''''''''']
		[Opc' ''''][Im64''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''']
	";

	0xxxxxxx; //~~ 7bit immed;
	1xxxxxxx; //~~ ;

	00000000; //~~ breakpoint;
	1xxxxxxx; //~~ push immediate 7-bit (signed?);
	01000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;

	//~~basic internal opcodes;

	//~~ NEED VIRTUAL MACHINE FOR PE-apps, JIT, WEB - cross-platform, multiple domain;
	 0 | breakpoint
	 1 | push immed (1,2,4 or 8 bytes)
	 2 | get
	 3 | set
	 4 | sub
	 5 | jpos
	 6 | nop
	 7 | interrupt!
	 8 |
	 9 |
	10 | EXT
	11 | get_IP
	12 | set_IP
	13 | get_SP
	14 | set_SP
	15 | get_FP
	16 | set_FP

	17 | and
	18 | or
	19 | not
	20 | xor

	21 | mul
	22 | div
	- exception (error)! //~~return through multiple stack frames until exc handler;
	-
	-
	-
	-
	-
	-
	-
	30 | 
	31 | 

	need per-bit push(shift?),set,get,
	//~~ ================================================;


	0000  //~~basic internal opcodes;
	0001 ??
	0010 push(byte)
	0011 -drop (get_SP+push+sub+set_SP)
	0100 get
	0101 set
	0110 sub
	0111 jpos
	jlez



	1000 //~~ extended internal opcodes;
	1001 get_SP ??? registers will be mapped to memory! need revise address space/
	1010 set_SP
	1011 get_FP
	1100 set_FP
	1101 get_IP
	1110 set_IP
	1111 //~~ extended syllable (extended to byte);

	1111 0000;
	
	//drop;
	push;
	get;
	set;
	sub;
	jpos;
	(closer);
	EXT++;


	
	nop;
	ret;

	!!!;
	call;//~~ ???;
	mode,error; //~~???;
	
	opener,closer;

};

loop 10;
{
	loop 10;
	{
		bla;bla;bla;
		dec;
	};
	bla;bla;bla;
	dec;
};
!!!;

test1
{
	!!!;
	
	#b010101010;
	#1e10;
	//#
	42.0'34'123'1110001;
	10001100'01110001'10011200'11001111;
	120001202'12112;
	4'237'101'332;
	
	
	
	
	
	NUMBER LITERALS:
	- signed/unsigned (integers only);
		//~~ prefixes: (+/- for signed), (# for unsigned), (NO prefix - use default);
			1, +1, -1
			#1,+1,+42,-4,#1,#42
			#+1,#-2,#+0,
			#+42x10, #+12012x3

			+1 - +2
			(_MyNum - +2 + +3)
			128u;
			+/-/u;
			u128;
			u128t3;

	- binary/trinary length (byte,word etc, single/double/triple precision);
		//~~ suffixes;
		0.0f, 0.0d
			#42,##42,####42,
			x1,x2,x4,x8,x16

	- integer/floating-point (precision?)
		//~~ '.','.0';
		0, 0.0;
		0.0x1, 0.0x2, 0.0x4, 0.0x8;//~~ NOT a letter (note base36);
		
			
	- numeral system;
		//~~ b-binary,t-ternary,d-decimal,n-nonary,h/x-hexademical etc;
		//~~ r2 - binary, r16 - hexademical, (conflict with length);
		0, 0xff,   ->
			#10x42, #16xff, #3x121210, #2x11100011
			#42x10, #ffx16, #120120x3, #1100110x2 //~~ NOT letter 'x' (note base36);
			#42*10, #ff*16, #120120*3, #1100110*2
			42t,
			+ff.ffffh;

			11b = 4d;
			12t = 5d;
			42n3
			+42.123e100n3  //~~ NOT a letter (note base36);
			+42.123e100*3 //~~ if default ns specified is nonary;

			10111010b1

	- overall;
		- default: "NUM:#0d4";  //~~ unsigned decimal int32;
		- default: "num:+0d2";  //~~ signed decimal int16;
		- default: "num:0.0d8"; //~~ decimal float64;
		- default: "num:#0d1"; //~~ unsigned decimal byte;

		- default: "num:#0h1"; //~~ unsigned hexademical ???;
		- default: "num:#0h4"; //~~ unsigned hexademical int32;
			#AA; #ABCDEF/16*8;

		- default: "num:#r36*1"; //~~ unsigned base36 byte;
		- default: "num:#r36*1"; //~~ unsigned base36 byte;
			- #H,#E,#L,#L,#O,#W,#O,#R,#L,#D
			
			-1.0/10*4 - decimal signed negative float32

		- default: "num:+0.0d";
		#2 + #2; //~~ two unsigned;
		_Num * #0;
		_Num * (iX / #2);
		
	
		+42; +42*10; +42.0*10x10; //~~ NOT letter 'x' (note base36);
		+42; +42*10; +42.0*10x10;
		42.0_4
		42.0d_4

		46 + 65 * 2.0;
		_Array[#2] = -2.0;
		
		//_Array[3] 1.0;
		_Array[3, 1.0];
		_X 1;
		_Y 2;
		_X,_Y 1,2;
		_X,_Y _Y,_X;
		_Z (_X + _Y);
		
		
		
		
		_Array[3] = 1.0;   //~~ float value at integer index (integers - default);
		_Array[#3] = 1;    //~~ the same (float -default);
		_Array[#3] = #1.0; //~~ example: base36 - default;
		
		#ABCDEFGHIJKLMNOPQRSTUVWXYZ;
		
		
		
		


	byte,word,dword,qword;
	



	0xff000000;
	0n30;
	0d100;
	0b100111100;
	0d3'1415;
	
	#3'1415;
	
	#1 + #2;
	
	
	
	010110001b;
	122100201t;
	231532534n;
	321124124d;
	//f32355h;
	
	0'4444444n;
	
	
	
	
	
	rgba 255,0,255,0;
	
	
	
	111,222,333,"Hello, World!";
	
	//set-stack-item-type !2 $'StackItemType'Int32;
	//!!!;
	@sin  "HW_Str" 2;
	//#sit !2 "NAME";
	
	
	!!!;
	//set-binary-mode
	//0001b,2,;
	

	1110001010001111001110001101011011011001;
	----|-----------------------------------;
	0000000000000000000000000000000000000000;

	
	1-trit processor;
	- 1-trit data, offsets and instructions;


	1102020021002020011210002001122020011011200122122011;
	----------------------------------------------------;
	0 - binary 0;
	1 - binary 1;
	2 - ;

	0 - nop; 
	1 - inc;
	2 - conditional jump () or nop;
		//~~ sets flags for: ;
			//~~ if was nop      (02) - set flag nop=1;
			//~~ if was any jump (x2) - set flag nop=0;

		02 - nop;
		12 - jump forward;
		22 - jump backward;

		x02  - nop;
		x12  - fwd (if next bank is last - halt);
		022 - bwd;

	----------------------------------
	

	
	|000000000
	|000000000
	|000000000
	|000000000
	|000000000
	|000000000


	Shift right:

	INP	101010...
			
			101010.12
			101010.12
	OUTP: 101010.00
	---------
	101010...


	101010.12
	101010.00
	---------
	101010...


	000000.12
	111111.22

	111111.10
	000000.00
	-------
	101010.0



	000000
	000000
	000000
	000000


	110002
	211122
	222112
	220011
	100000
	102212
	202212
	010002
	021011

	i | proc                | o
	===========================
	+ | 
	+ | 
	o | 
	o | 
	o | 
	- | 
	- | 
	+ | 
	---------------------------
	  |                     |  


ChA "ChA_Name_1" {attr1 1; attr2 2.0; attr3 "V3";};
ChA "ChA_Name_1"
{
	attr1 1;
	attr2 2.0;
	attr3 "V3";
	
	Children {};
};
ChA "ChA_1" (attr1 1; attr2 2.0; attr3 "V3";)
{
	ChB;
	ChB;
	
	ChB "ChB_1";
	ChB (attr1 1; attr2 2.0; attr3 "V3";)
	ChB (attr1 1; attr2 2.0; attr3 "V3";)
	ChB (name "ChB_3"; attr1 2; attr1 3;);
	
	ChB "ChB_1" (attr1 1; attr2 2.0; attr3 "V3";);
	ChB "ChB_1" (attr1 1; attr2 2.0; attr3 "V3";) {};
	ChB "ChB_1" (attr1 1; attr2 2.0; attr3 "V3";) {};
	
	ChB "ChB_1" (attr1 1; attr2 2.0; attr3 "V3";)
	{
	
	};
	
	ChB (attr1,attr2,attr3 1,2.0,"V3");
	
	ChB (1,2.0,"V3");
};
























	11000221112222211222001110000010221220221201000202101
	12211010011121020002110120201022012101122012211221011
	12220121222201022221112022210102100021101002121011101
	22011000100022001221210021211121120012012121012101100
	20100111211021121220211211001101210101220012121121101
	12201201110100022020200020222100020020202211220020112
	01112100021122211202210212211101222121202122002122220
	20102121121222000011210020011000011021211120100112120
	22101012120010101010120221102110020201220100111120001
	11021021122101110001122220021010221102022100021202220
	00021100212020200002122221202200200212012012220220022
	10101002222011000100111011022000212100001210210001122
	22010220202211000110202222222021200112000111122002010
	21200122112110112010002022221020121011020102012100210
	12020012100010102201000012120110110201000200022210121
	20201221202010100022211012101022120112220010212012021
	21200000122100012201022102111111102101112210102100222
	02202101201101220120102120220021020100211111212012202
	10112210112102222022222122222022011112220002102111022
	12012220212010101021212020111201022102020002211120020
	0022211211210220010121202020011111


	--000||---|||||--|||00---00000-0||-||0||-|0-000|0|-0-
	-||--0-00---|-0|000|--0-|0|0-0||0-|-0--||0-||--||-0--
	-|||0-|-||||0-0||||---|0|||-0-0|-000|--0-00|-|-0---0-
	||0--000-000||00-||-|-00|-|---|--|00-|0-|-|-0-|-0--00
	|0-00---|--0|--|-||0|--|--00--0-|-0-0-||00-|-|--|--0-
	-||0-|0---0-000||0|0|000|0|||-000|00|0|0||--||00|0--|
	0---|-000|--|||--|0||-0|-||---0-|||-|-|0|-||00|-||||0
	|0-0|-|--|-|||0000--|-00|00--0000--0|-|---|0-00--|-|0
	||-0-0-|-|00-0-0-0-0-|0||--0|--00|0|0-||0-00----|000-
	--0|-0|--||-0---000--||||00|-0-0||--0|0||-000|-|0|||0
	000|--00|-|0|0|0000|-||||-|0||00|00|-|0-|0-|||0||00||
	-0-0-00||||0--000-00---0--0||000|-|-0000-|-0|-000--||
	||0-0||0|0||--000--0|0|||||||0|-|00--|000----||00|0-0
	|-|00-||--|--0--|0-000|0||||-0|0-|-0--0|0-0|0-|-00|-0
	-|0|00-|-000-0-0||0-0000-|-|0--0--0|0-000|000|||-0-|-
	|0|0-||-|0|0-0-000|||--0-|-0-0||-|0--|||00-0|-|0-|0|-
	|-|00000-||-000-||0-0||-0|-------0|-0---||-0-0|-00|||
	0||0|-0-|0--0-||0-|0-0|-|0||00|-0|0-00|-----|-|0-||0|
	-0--||-0--|-0||||0|||||-|||||0||0----|||000|-0|---0||
	-|0-|||0|-|0-0-0-0|-|-|0|0---|0-0||-0|0|000||---|00|0
	00|||--|--|-0||00-0-|-|0|0|00-----



};