//~~(1;;); //~~ forces syntax error after double ';';
(
*!1 {get_SP};
*!2 {sub get_SP,-4};
*!3 {sub get_SP,-8};
*!4 {sub get_SP,-12};
*!5 {sub get_SP,-16};
*!6 {sub get_SP,-20};
*!7 {sub get_SP,-24};
*!8 {sub get_SP,-28};
*!9 {sub get_SP,-32};

*drop  {drop1};
*drop1 {set_SP (sub get_SP,-4)};
*drop2 {set_SP (sub get_SP,-8)};
*drop3 {set_SP (sub get_SP,-12)};
*drop4 {set_SP (sub get_SP,-16)};
*drop5 {set_SP (sub get_SP,-20)};
*drop6 {set_SP (sub get_SP,-24)};
*drop7 {set_SP (sub get_SP,-28)};
*drop8 {set_SP (sub get_SP,-32)};
*drop9 {set_SP (sub get_SP,-36)};

*push  {};
*bla   {nop};
*dup   {get !1};
*movup {set !2};

//*!0 {sub get_SP,+1};
*j<=0 {csp++; jlez};

*reset  {mode 254};

*add   {neg; sub};
*neg   {dup; set !3 0; sub};

*mulsign
{
//	+60,0; //~~ +1;
//	+60,0; //~~ -1;
//	-60,+1; //~~ -1;
//	-60,-1; //~~ +1;
//	
	//!!!;
	dup;
	jpos not,^Z;
		jpos drop,^P;
			drop; neg;
		:P;
		//!!!;
		ret;
		//~~goto ^RET;
	
	:Z;
	//!!!;
	drop2; 0;
	
	//~~:RET;
	//	!!!;
};

//~~mul   (iOp1,iOp2,oV,_Neg2,cI)
//~~mul   (iOp1'$i32,iOp2'$i32,oV'$i32,_Neg2'$i32,cI'$i32)
mul
(
	iOp1'$i32,
	iOp2'$i32,
	oV'$i32,
	_Neg2'$i32,
	cI'$i32
)
{
	//!!!;
//	get,sign iOp1;
//	get,sign iOp2;
//	
	jpos (sub (get iOp2; get iOp1)),^DontSwap;
	(
		drop;
		get iOp1;
		set iOp1 (get iOp2);
		set iOp2;
	);
	:DontSwap;
	
	
	//!!!;
	set oV 0;
	set _Neg2 (get,neg iOp2);
	
	//!!!;
	set cI (get,abs iOp1); :I; jpos,drop (dec,dup),^I
	(
		//!!!;
		set oV (sub (get oV; get _Neg2));
	);
	//!!!;
	set oV (mulsign (get oV; get,sign iOp1));
};

*abs     {dup; jpos ^RET; drop; neg; :RET;};
*sign    {jpos ^POS; neg; jpos ^NEG; ret; :POS; ret +1; :NEG; ret -1; };
*clamp01 {sign; inc; dup; jpos ^GE0; drop; ret; :GE0; dec};

*goto    {csp++; set_IP};

*case    {jpos (not sub (get !3; get !2)),^J; drop3; ret; :J; drop; movup; csp++; set_IP};
*not     {jpos ^1; neg; jpos ^1; drop; ret 1; :1; ret 0};
*and     {sub (clamp01,neg; set !3 (get,clamp01 !2)); dec; clamp01};
*or      {!!!; };
*xor     {!!!; };

//*case
//{
//	xget 3; xget 3; sub; not;
//	
//	jpos ^Jumping; drop;drop;drop; ret; :Jumping; xmov -3; xset 1 5;
//	drop; drop; csp--; jpos;
//};
*loop {dup};

*inc {sub -1};
*dec {sub +1};

**inc {dup; dup; get; inc; set !3; set};
**dec {dup; dup; get; dec; set !3; set};

**sub    {!!!;};
**equals {!!!;};
**less?  {get; !3; get; sub; jpos ^TRUE; set !3 0; drop; ret; :TRUE; set !2 1;};

test (_L1,_L2)
{
	set _L1 4;
	set _L2 5;
	
	*less? _L1,_L2;
	!!!;
	
};
*white {#ffffffffx16};
*black {#ff000000x16};
*red   {#ffff0000x16};
*green {#ff00ff00x16};
*blue  {#ff0000ffx16};

*yellow {#ffffff00x16};


*rgba
{
	mul 4;
	set;
	
	//!!!;
	//set (get !4; get !2); inc;
	//set (get !3; get !2); inc;
	//set (get !2; get !2); inc;
	//set (get !5; get !2); drop5;
};
//fillsquare(iA,iR,iG,iB,iX,iY,iW,iH,iScrW,iScrH,_MaxX,_MaxY,_ScanW)
//{
//	//!!!;
//	set _MaxX  (add (get iX; get iW));
//	set _MaxY  (add (get iY; get iH));
//	set _ScanW (mul (get iScrW; 1));
//	
//	dup get iY; :NextRow; jpos (sub (get _MaxY; get !2)),^NextRow
//	(
//		dup get iX; :NextCell; jpos (sub (get _MaxX; get !2)),^NextCell
//		(
//			add (mul (get _ScanW; get !4));
//			
//			rgba (get !5) (get iA;get iR;get iG;get iB);
//			drop;
//			
//			
//			inc;
//			dup;
//			//!!!;
//		);
//		drop3;
//		//!!!;
//		inc;
//		dup;
//	);
//	!!!;
//};
*screensize {30,20};
//~~fillsquare(iColor,iX,iY,iW,iH,iScrW,iScrH,_MaxX,_MaxY,_ScanW,cX,cY,cBase)
//fillsquare
//(
//	iColor'@i32,
//	iX'@i32,
//	iY'@i32,
//	iW'@i32,
//	iH'@i32,
//	iScrW'@i32,
//	iScrH'@i32,
//	_MaxX'@i32,
//	_MaxY'@i32,
//	_ScanW'@i32,
//	cX'@i32,
//	cY'@i32,
//	cBase'@i32
//)
fillsquare(iColor'$i32,iX'$i32,iY'$i32,iW'$i32,iH'$i32,iScrW'$i32,iScrH'$i32)

fillsquare'$i32 (iColor,iX,iY,iW,iH,iScrW,iScrH)
{
	@alloc $i32 (_MaxX,_MaxY,_ScanW,cX'$f64,cY'$f64,cBase);
	
	
	fillsquare'[_Color,cX,cY,_W,_H,gScrW,gScrH];
	
	
	set _MaxX  (add (get iX; get iW));
	set _MaxY  (add (get iY; get iH));
	set _ScanW (mul (get iScrW; 1));
	
	set cY (get iY); :Y; jpos,drop (sub (get _MaxY; get cY)),^Y
	(
		set cX (get iX); :X; jpos,drop (sub (get _MaxX; get cX)),^X
		(
			set cBase (mul (get _ScanW; get cY); add (get cX));
			rgba (get cBase) (get iColor);
			
			*inc cX;
			//!!!;
		);
		*inc cY;
		!!!;
	);
	//!!!;
};
drawimage
{
//	mul 0,5; !!!; drop;
//	mul -5,60; !!!; drop;
//	mul 3,5; !!!; drop;
//	mul 20,30; !!!; drop;
////	
//	mul 10,-12; !!!; drop;
	
	//!!!;
	
	//rgba 0 (66666666);
	//!!!;
//	
	//set 0 66666666;
	//set 4 68445154;
	//set 8 68445154;
	//set 12 68445154;
//	
	//!!!;
	
	//rgba 0 (68445154);
	//rgba 1 black;
	//rgba 2 white;
	//rgba 3 black;
	//rgba 4 red;
	//rgba 5 green;
	//rgba 6 blue;
	//!!!;
	//afsf;
	//!!!;
	fillsquare (white, 0,0,30,20,screensize);
	//!!!;
	//!!!;
	fillsquare (black, 1,1,28,1,screensize);
	fillsquare (black, 28,1,1,18,screensize);
	fillsquare (black, 1,18,28,1,screensize);
	fillsquare (black, 1,1,1,18,screensize);
	//!!!;
	//reset;
	//fillsquare (black, 1,1,28,18,screensize);
	
	//!!!;
	
	//fillsquare (white, 2,2,26,16,screensize);
	
	fillsquare (red,   6,3,10,8,screensize);
	fillsquare (green, 10,6,10,8,screensize);
	//!!!;
	fillsquare (blue,  4,7,20,3,screensize);
	//!!!;
	//fillsquare (white, 2,2,26,16,screensize);
	fillsquare (red,   7,4,10,8,screensize);
	fillsquare (green, 11,7,10,8,screensize);
	fillsquare (blue,  5,8,20,3,screensize);
	//!!!;
	//fillsquare (white, 2,2,26,16,screensize);
	fillsquare (red,   8,5,10,8,screensize);
	fillsquare (green, 12,8,10,8,screensize);
	fillsquare (blue,  6,9,20,3,screensize);
	//!!!;
	//fillsquare (white, 2,2,26,16,screensize);
	fillsquare (red,   9,6,10,8,screensize);
	fillsquare (green, 13,9,10,8,screensize);
	fillsquare (blue,  7,10,20,3,screensize);
	//!!!;
	//fillsquare (white, 2,2,26,16,screensize);
	fillsquare (black,  2,2,26,16,screensize);
	fillsquare (yellow, 1,1,28,18,screensize);
	fillsquare (black,  0,0,30,20,screensize);
	
	reset;
	
};
*adrmode {set-address-mode};
*opdmode {set-operand-mode};
*@sin {set_ident_name};

//~~testproc (i1,i2,i3,o1,o2,_1,_2,_3,_4);
testproc (rTestVar,iName,iAge,iPassNum,o1,oError; "#+*4")
{
	!!!;
	//set (sub get_SP,-4) 666;
	set rTestVar 123456;
	set o1     555;
	set oError 42;
	
	//!!!;
};

*break {!!!;};

!program// (oError)
{
	//!!!;
	drawimage;
	//!!!;
//	654321;
//	
	//111,222,333;
	//!!!;
	//testproc();
//	
//	
//	111,222,333;
//	!!!;
//	//wasf;
//	drop4;
//	drop4;
//	drop4;
//	
//	drop4;
//	drop4;
//	
	reset;
};

);


	get (sub #EAX -3);

	mov EAX,ST0;
	mov eax,st0;
	mov eax,O[ebp * 2 + 4];

	mov EAX,ST0;
	mov R0,ST0;
	mov r0,st0;


	mov #EAX,#ST0;
	mov #eax,#st0;
	mov #eax,O[#ebp * 2 + 4];

	mov #EAX,#ST0;
	mov #R0,#ST0;
	

	mov @EAX,@ST0;
	mov @eax,@st0;
	mov @eax,O[@ebp * 2 + 4];

	mov @EAX,@ST0;
	mov @R0,@ST0;


	mov %EAX,%ST0;
	mov %eax,%st0;
	mov %eax,O[%ebp * 2 + 4];

	mov %EAX,%ST0;
	mov %R0,%ST0;


	mov &EAX,&ST0;
	mov &eax,&st0;
	mov &eax,O[&ebp * 2 + 4];

	mov &EAX,&ST0;
	mov &R0,&ST0;


	mov *EAX,*ST0;
	mov *eax,*st0;
	mov *eax,O[*ebp * 2 + 4];

	mov *EAX,*ST0;
	mov *R0,*ST0;

	

	set oDest;

	get @IP;
	get iOffs;
	sub;
	get;
	set oDest;


a1; aName;
b1; bName;
c1; cName;
d1; dName;
e1; eName;
f1; fName;
g1; gName;
h1; hName;
i1; iName;
j1; jName;
k1; kName;
l1; lName;
m1; mName;
n1; nName;
o1; oName;
p1; pName;
q1; qName;
r1; rName;
s1; sName;
t1; tName;
u1; uName;
v1; vName;
w1; wName;
x1; xName;
y1; yName;
z1; zName;

!1; !Name;
@1; @Name;
#1; #Name;
$1; $Name;
%1; %Name;
^1; ^Name;
&1; &Name;
*1; *Name;
'1; 'Name;
:1; :Name;
/1; /Name;
|1; |Name;
=1; =Name;
+1; +Name;
-1; -Name;
_1; _Name;
\1; \Name;
`1; `Name;
<1; <Name;
>1; >Name;
?1; ?Name;


*basic_opcodes
{
	"
		[Opc' Im7']
		[Opc' ''''][Im8''''']
		[Opc' ''''][Im16''''''''''''']
		[Opc' ''''][Im32''''''''''''''''''''''''''''']
		[Opc' ''''][Im64''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''']
	";

	0xxxxxxx; //~~ 7bit immed;
	1xxxxxxx; //~~ ;

	00000000; //~~ breakpoint;
	1xxxxxxx; //~~ push immediate 7-bit (signed?);
	01000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;
	00000000; //~~ ;



	0000  //~~basic internal opcodes;
	0001 ??
	0010 push
	0011 -drop (get_SP+push+sub+set_SP)
	0100 get
	0101 set
	0110 sub
	0111 jpos
	jlez



	1000 //~~ extended internal opcodes;
	1001 get_SP ??? registers will be mapped to memory! need revise address space/
	1010 set_SP
	1011 get_FP
	1100 set_FP
	1101 get_IP
	1110 set_IP
	1111 //~~ extended syllable (extended to byte);

	1111 0000;
	
	//drop;
	push;
	get;
	set;
	sub;
	jpos;
	(closer);
	EXT++;


	
	nop;
	ret;

	!!!;
	call;//~~ ???;
	mode,error; //~~???;
	
	opener,closer;

};

loop 10;
{
	loop 10;
	{
		bla;bla;bla;
		dec;
	};
	bla;bla;bla;
	dec;
};
!!!;

test1
{
	!!!;
	
	#b010101010;
	#1e10;
	//#
	42.0'34'123'1110001;
	10001100'01110001'10011200'11001111;
	120001202'12112;
	4'237'101'332;
	
	
	
	
	NUMBER LITERALS:
	- signed/unsigned (integers only);
		//~~ prefixes: (+/- for signed), (# for unsigned), (NO prefix - use default);
			1, +1, -1
			#1,+1,+42,-4,#1,#42
			#+1,#-2,#+0,
			#+42x10, #+12012x3

			+1 - +2
			(_MyNum - +2 + +3)
			128u;
			+/-/u;
			u128;
			u128t3;

	- binary/trinary length (byte,word etc, single/double/triple precision);
		//~~ suffixes;
		0.0f, 0.0d
			#42,##42,####42,
			x1,x2,x4,x8,x16

	- integer/floating-point (precision?)
		//~~ '.','.0';
		0, 0.0;
		0.0x1, 0.0x2, 0.0x4, 0.0x8;
		
			
	- numeral system;
		//~~ b-binary,t-ternary,d-decimal,n-nonary,h/x-hexademical etc;
		//~~ r2 - binary, r16 - hexademical, (conflict with length);
		0, 0xff,   ->
			#10x42, #16xff, #3x121210, #2x11100011
			#42x10, #ffx16, #120120x3, #1100110x2
			#42*10, #ff*16, #120120*3, #1100110*2
			42t,
			+ff.ffffh;

			11b = 4d;
			12t = 5d;
			42n3
			+42.123e100n3
			+42.123e100*3 //~~ if default ns specified is nonary;

			10111010b1

	- overall;
		- default: "NUM:#0d4";  //~~ unsigned decimal int32;
		- default: "num:+0d2";  //~~ signed decimal int16;
		- default: "num:0.0d8"; //~~ decimal float64;
		- default: "num:#0d1"; //~~ unsigned decimal byte;

		- default: "num:#0h1"; //~~ unsigned hexademical ???;
		- default: "num:#0h4"; //~~ unsigned hexademical int32;
			#AA; #ABCDEF/16*8;

		- default: "num:#r36*1"; //~~ unsigned base36 byte;
		- default: "num:#r36*1"; //~~ unsigned base36 byte;
			- #H,#E,#L,#L,#O,#W,#O,#R,#L,#D
			
			-1.0/10*4 - decimal signed negative float32

		- default: "num:+0.0d";
		#2 + #2; //~~ two unsigned;
		_Num * #0;
		_Num * (iX / #2);
		
	
		+42; +42*10; +42.0*10x10;
		+42; +42*10; +42.0*10x10;
		42.0_4
		42.0d_4

		46 + 65 * 2.0;
		_Array[#2] = -2.0;
		
		_Array[3] = 1.0;   //~~ float value at integer index (integers - default);
		_Array[#3] = 1;    //~~ the same (float -default);
		_Array[#3] = #1.0; //~~ example: base36 - default;
		
		#ABCDEFGHIJKLMNOPQRSTUVWXYZ;
		
		
		
		


	byte,word,dword,qword;
	



	0xff000000;
	0n30;
	0d100;
	0b100111100;
	0d3'1415;
	
	#3'1415;
	
	#1 + #2;
	
	
	
	010110001b;
	122100201t;
	231532534n;
	321124124d;
	//f32355h;
	
	0'4444444n;
	
	
	
	
	
	rgba 255,0,255,0;
	
	
	
	111,222,333,"Hello, World!";
	
	//set-stack-item-type !2 $'StackItemType'Int32;
	//!!!;
	@sin  "HW_Str" 2;
	//#sit !2 "NAME";
	
	
	!!!;
	//set-binary-mode
	//0001b,2,;
	
};