reset    < mode[254] > hault < mode[255] >
//dup       < osp++ push[3] mov osp-- >
dup       < mov[-1] >
//neg       <? dup osp-- osp-- push[0] osp++ sub >
neg       < dup mov[0] -4 drop drop sub >
add       < neg sub >
inc       < sub[-1] >
dec       < sub[+1] >
sign      < ^POS jpos neg ^NEG jpos ret :POS ret[+1] :NEG ret[-1] >
compare   < sub sign >
swap_n    < dup dup sub[-2] mov dup mov[6] mov[4] drop neg sub[2] mov drop drop drop mov[-4] drop drop >
swap      < swap_n[3] drop >

get       < push[0] swap sub[-2] mov drop >
set       < neg sub[2] mov drop >
true      < ret[1] >
false     < ret[0] >
not       < ^1 jpos neg ^1 jpos drop ret[1] :1 ret[0] >
make12345 < push[N-111,N-2222,N-33333,N-444444,N-5555555] >
jump      < push[1] swap csp-- jpos >
jif0      < swap dup ^POS jpos neg ^NEG jpos osp-- osp-- csp-- jump :POS :NEG swap drop >
jifeq     < dup mov[5] mov[5] osp-- compare ^IfJumping jif0 osp-- osp-- ret :IfJumping mov[-4] osp-- osp-- osp-- csp-- jump>
//jif1      < here swap dup push[1] sub ^IFJUMPING jif0 osp-- push[-3] mov osp-- osp-- ret :IFJUMPING osp-- csp-- jump >

equals?   < get[2] get[2] sub not set[2] drop drop ^True jpos ret :True ret[1] >
dignode   < unfold dec swap >


//get < push[0] push[iA] >
//get[5]
//set[4]

!program
 <
	//here
	call[GetBaseGroupingBlock]
	
	call[ProcessBlock]
	
	
	here
	resolve-value
	drop
	here
	//make12345
	push[111,222,333]
	push[2]
	set-return-value
	here

	here
 >
proc CallFunction
 <
	
 >
proc GetBaseGroupingBlock
 <
	unfold drop
	unfold drop
	unfold drop
	//unfold //drop
 >
proc ProcessBlock
 <
	unfold
	<*
		dec swap
		call[ProcessExpression]
	*>
 >
proc ProcessExpression
 <
	unfold
	<*
		dec swap
		call[ProcessList]
	*>
 >
proc ProcessList
 <
	unfold
	<*
		dec swap
		call[ProcessListItem]
	*>
 >
proc ProcessListItem
 <
	//here
	unfold
	<*
		dec swap
		//here
		call[ProcessAtom]
		
		
		//here
		
		swap
	*>
 >
proc ProcessAtom
 <
	//here
	is-node?
	<?
		drop
		//here
		
		get-node-value
		get-variable
		//here
		get-variable-value
		
		//here
		
		true
	?>
	not
	<?
		drop
		//here
		
		get-object-type equals?[3]
		<?
			//~~ function;
			drop
			get[3] get-node-type equals?[5]
			<?
				drop
				//~~ is argument block;
				//here
				call[Emulate_ProcessBlock]
				//here
				dup sub[-3] get
				
				here
				call-function
				here
				
				
				true
			?>
			not
			<?
				drop
				//~~ something else;
				false
			?>
			
			
			here
			
			call[ProcessAtom-Function]
			
			true
		?>
		not
		<?
			drop
			//here
			
			//~~push[0] push[5] mov drop;
			get[3]
			get-node-value
			get-member
			//here
			//~~push[-4] mov drop drop swap;
			set[2] drop swap
			
			//here
			false
		?>
		drop
		false
	?>
	drop
 >
proc ProcessAtom-Function
 <
	//~~push[0] push[4] mov drop push[0] compare;
	get[2] compare[0]
	<?
		drop
	
		//~~ push[0] push[5] mov drop;
		get[3] get-node-type equals?[5]
		<?
			drop
			
			
			here
			true
		?>
		drop
		here
		
		ret
	?>
	drop
 >
proc Emulate_ProcessBlock
 <
	push["Hello, World!",222,111,3]
 >
proc MyTestFunction
 <
	//here
	<* sub[1] mov[-3] drop drop *> drop
	
	
	push["YO-HO-HO!"]
 >
